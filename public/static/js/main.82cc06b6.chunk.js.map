{"version":3,"sources":["index.js"],"names":["calculateWinner","squares","lines","i","length","a","b","c","Square","props","className","onClick","value","Board","this","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","setState","concat","step","current","winner","moves","map","move","desc","key","jumpTo","status","handleClick","ReactDOM","render","document","getElementById"],"mappings":"uOAIA,SAASA,EAAgBC,GAWvB,IAVA,IAAMC,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,IAAD,cACnBD,EAAMC,GADa,GAC9BE,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQI,KAAOJ,EAAQM,GACpE,OAAON,EAAQI,GAGnB,OAAO,KAGT,SAASG,EAAOC,GACd,OACE,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACvCF,EAAMG,O,IAKPC,E,2KAESV,GAAI,IAAD,OACd,OACE,kBAACK,EAAD,CACEI,MAAOE,KAAKL,MAAMR,QAAQE,GAC1BQ,QAAS,kBAAM,EAAKF,MAAME,QAAQR,Q,+BAMtC,OACE,6BACE,yBAAKO,UAAU,aACZI,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,IAErB,yBAAKL,UAAU,aACZI,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,IAErB,yBAAKL,UAAU,aACZI,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,S,GA3BTC,IAAMC,WAkCpBC,E,kDACJ,WAAYT,GAAQ,IAAD,8BACjB,cAAMA,IACDU,MAAQ,CACXC,QAAS,CACP,CAACnB,QAASoB,MAAM,GAAGC,KAAK,QAE1BC,WAAY,EACZC,SAAS,GAPM,E,wDAUPrB,GACV,IAAMiB,EAAUN,KAAKK,MAAMC,QAAQK,MAAM,EAAGX,KAAKK,MAAMI,WAAa,GAEhEtB,EADYmB,EAAQA,EAAQhB,OAAS,GACnBH,QAAQwB,QAC1BzB,EAAgBC,IAAYA,EAAQE,KACxCF,EAAQE,GAAKW,KAAKK,MAAMK,QAAU,IAAM,IACxCV,KAAKY,SAAS,CACZN,QAASA,EAAQO,OAAO,CAAC,CAAC1B,QAASA,KACnCsB,WAAYH,EAAQhB,OACpBoB,SAAUV,KAAKK,MAAMK,a,6BAGlBI,GACLd,KAAKY,SAAS,CACZH,WAAYK,EACZJ,QAASI,EAAO,IAAM,M,+BAGhB,IAAD,OACDR,EAAUN,KAAKK,MAAMC,QACrBS,EAAUT,EAAQN,KAAKK,MAAMI,YAC7BO,EAAS9B,EAAgB6B,EAAQ5B,SACjC8B,EAAQX,EAAQY,KAAI,SAACJ,EAAMK,GAC/B,IAAMC,EAAOD,EACT,wBAAyBA,EACzB,0BACJ,OACE,wBAAIE,IAAKF,GACP,4BAAQtB,QAAS,kBAAM,EAAKyB,OAAOH,KAAQC,OAI7CG,EAASP,EACT,aAAcA,EACd,wBAAsBhB,KAAKK,MAAMK,QAAU,IAAM,KACrD,OACE,yBAAKd,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACG,EAAD,CACEZ,QAAS4B,EAAQ5B,QACjBU,QAAS,SAACR,GAAD,OAAO,EAAKmC,YAAYnC,OAGrC,yBAAKO,UAAU,aACb,6BAAM2B,GACN,4BAAKN,S,GAxDIf,IAAMC,WAiEzBsB,IAASC,OACP,kBAACtB,EAAD,MACAuB,SAASC,eAAe,W","file":"static/js/main.82cc06b6.chunk.js","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  )\n}\n\nclass Board extends React.Component {\n\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    )\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      history: [\n        {squares: Array(9).fill(null)}\n      ],\n      stepNumber: 0,\n      xIsNext: true\n    }\n  }\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1)\n    const current = history[history.length - 1]\n    let squares = current.squares.slice()\n    if (calculateWinner(squares) || squares[i]) return\n    squares[i] = this.state.xIsNext ? 'X' : 'O'\n    this.setState({\n      history: history.concat([{squares: squares}]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    })\n  }\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    })\n  }\n  render() {\n    const history = this.state.history\n    const current = history[this.state.stepNumber]\n    const winner = calculateWinner(current.squares)\n    const moves = history.map((step, move) => {\n      const desc = move\n        ? 'Voltar ao movimento #'+ move\n        : 'Voltar para o início'\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      )\n    })\n    let status = winner\n      ? 'Vencedor: '+ winner\n      : 'Próximo jogador: '+ (this.state.xIsNext ? 'X' : 'O')\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// =============================================================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);"],"sourceRoot":""}